package io.redbee.boot.oauth.config;

import java.util.Collections;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.ldap.AuthenticationException;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

import io.redbee.boot.oauth.authorities.populators.JdbcAuthoritiesPopulator;
import io.redbee.boot.oauth.services.JdbcUserDetailsService;
@Configuration
@EnableWebSecurity
@Order(201)
public class AuthServerConfig extends WebSecurityConfigurerAdapter {

    @Value("${ldap.url}")
    private String ldapUrl;
    @Value("${ldap.host}")
    private String ldapHost;
    @Value("${ldap.mocked}")
    private static Boolean isMocked;

    @Autowired
    private JdbcUserDetailsService jdbcUserDetailsService;

    @Autowired
    private JdbcAuthoritiesPopulator jdbcAuthoritiesPopulator;

    @Autowired
    public static void globalUserDetails(AuthenticationManagerBuilder auth) throws Exception {
        if(!isMocked) {
            auth
                    .ldapAuthentication()
                    .contextSource()
                    .url(ldapUrl)
                    .managerDn("cn=AppsWebServices,cn=Users,dc=domain,dc=com")
                    .managerPassword("Apps2016**")
                    .and()
                    .userDnPatterns("cn=Users,dc=domain,dc=com")
                    .userSearchBase("cn=Users,dc=domain,dc=com")
                    .userSearchFilter("(&(sAMAccountName={0})(objectClass=top)(objectClass=person)(objectClass=organizationalPerson)(objectClass=user))")
                    .groupSearchBase("cn=Users,dc=domain,dc=com")
                    .ldapAuthoritiesPopulator(jdbcAuthoritiesPopulator)
                    .userDetailsContextMapper(jdbcUserDetailsService);
        } else {
            auth
                    .authenticationProvider(new AuthenticationProvider() {
                        @Override
                        public Authentication authenticate(Authentication authentication) throws AuthenticationException {
                            return new UsernamePasswordAuthenticationToken(
                                    jdbcUserDetailsService.mapUserFromContext(
                                            null,
                                            authentication.getPrincipal().toString(),
                                            Collections.emptyList()),
                                    authentication.getCredentials(),
                                    jdbcAuthoritiesPopulator.getGrantedAuthorities(null, authentication.getPrincipal().toString()));
                        }

                        @Override
                        public boolean supports(Class<?> authentication) {
                            return UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication);
                        }
                    })
                    .userDetailsService(new UserDetailsService() {
                        @Override
                        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
                            return jdbcUserDetailsService.mapUserFromContext(null, username, Collections.emptyList());
                        }
                    });


            auth
                    .authenticationProvider(new AuthenticationProvider() {
                        @Override
                        public Authentication authenticate(Authentication authentication) throws AuthenticationException {
                            return new UsernamePasswordAuthenticationToken(
                                    jdbcUserDetailsService.mapUserFromContext(
                                            null,
                                            authentication.getPrincipal().toString(),
                                            Collections.emptyList()),
                                    authentication.getCredentials(),
                                    jdbcAuthoritiesPopulator.getGrantedAuthorities(null, authentication.getPrincipal().toString()));
                        }

                        @Override
                        public boolean supports(Class<?> authentication) {
                            return UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication);
                        }
                    })
                    .userDetailsService(new UserDetailsService() {
                        @Override
                        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
                            return jdbcUserDetailsService.mapUserFromContext(null, username, Collections.emptyList());
                        }
                    });
        }
    }
	
	
}

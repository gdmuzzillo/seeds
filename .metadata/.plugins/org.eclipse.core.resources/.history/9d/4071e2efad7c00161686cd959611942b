package io.redbee.boot.oauth.config;

import org.apache.catalina.filters.CorsFilter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;

import io.redbee.boot.oauth.handlers.CustomLogoutSuccessHandler;

@Configuration
@Order(-10)
public class LoginConfig extends WebSecurityConfigurerAdapter{
	
	 @Autowired
     private AuthenticationManager authenticationManager;

     @Override
     protected void configure(HttpSecurity http) throws Exception {
         http.addFilterAfter(new CorsFilter(), AbstractPreAuthenticatedProcessingFilter.class)
                 .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.NEVER).and()

                 .csrf().disable()

                 .requestMatchers()
                 .antMatchers("/login", "/oauth/authorize", "/oauth/confirm_access", "/logout")
                 .and()

                 .authorizeRequests()
                 .antMatchers("/manage/**").permitAll()
                 .and()

                 .formLogin()
                 .loginPage("/login").failureUrl("/login?error=true").permitAll()
                 .and()
                 .logout()
                 .invalidateHttpSession(true)
                 .logoutSuccessHandler(new CustomLogoutSuccessHandler()).permitAll()
                 .and()
                 .authorizeRequests()
                 .anyRequest().authenticated();

     }

     @Override
     protected void configure(AuthenticationManagerBuilder auth) throws Exception {
         auth.parentAuthenticationManager(authenticationManager);
     }
     @Override
     public void configure(WebSecurity webSecurity) throws Exception {
         // TODO sacar si es prod
         webSecurity
                 .ignoring()
                 .antMatchers("/config*/**");

     }

}

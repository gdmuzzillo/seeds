package com.turner.controller;

import com.turner.domain.AlephUser;
import com.turner.domain.Enterprise;
import com.turner.domain.ServiceComposite;
import com.turner.filter.EnterpriseContext;
import com.turner.service.JdbcEnterpriseService;
import com.turner.service.JdbcServicesService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.WebAttributes;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import java.security.Principal;
import java.util.List;

/**
 * Created by biandra on 16/09/15.
 */
@RestController
public class UserController {

    private JdbcServicesService jdbcAuthorizedServices;
    private JdbcEnterpriseService jdbcEnterpriseService;

    @Autowired
    public UserController(JdbcServicesService jdbcAuthorizedServices,
                          JdbcEnterpriseService jdbcEnterpriseService) {
        this.jdbcAuthorizedServices = jdbcAuthorizedServices;
        this.jdbcEnterpriseService = jdbcEnterpriseService;
    }

    @RequestMapping(value = "/user")
    @ResponseBody
    public Principal user(Principal user) {
        return user;
    }

    @RequestMapping(value = "/login")
    public ModelAndView login(@RequestParam(value = "error", defaultValue = "false") Boolean error,
                              Model model,
                              HttpServletRequest request) {
        Object isDisabled = request.getSession().getAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
        if(isDisabled != null && isDisabled instanceof DisabledException){
            model.addAttribute("blocked", true);
            request.getSession().removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
        } else {
            model.addAttribute("error", error);
        }
        return new ModelAndView("login", model.asMap());
    }

    @RequestMapping(value = "/services")
    @ResponseBody
    public List<ServiceComposite> getServices() {
        String userName = ((AlephUser)SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getDbUser();
        return jdbcAuthorizedServices.get(userName, EnterpriseContext.getEnterprise());
    }

    @RequestMapping(value = "/enterprises")
    @ResponseBody
    public List<Enterprise> getEnterprises() {
        String userName = ((AlephUser)SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getDbUser();
        return jdbcEnterpriseService.getEnterprises(userName);
    }

}
